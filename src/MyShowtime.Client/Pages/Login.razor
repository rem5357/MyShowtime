@page "/login"
@using MyShowtime.Shared.Dtos
@using MyShowtime.Client.Services
@inject HttpClient Http
@inject UserStateService UserState
@inject NavigationManager Navigation
@layout EmptyLayout

<PageTitle>Select User - MyShowtime</PageTitle>

<div class="login-container">
    <div class="login-card">
        <h1>My Showtime</h1>
        <p class="subtitle">Select your account to continue</p>

        @if (users == null)
        {
            <p class="loading">Loading users...</p>
        }
        else if (users.Count == 0)
        {
            <p class="error">No users available.</p>
        }
        else
        {
            <div class="user-list">
                @foreach (var user in users)
                {
                    <button class="user-card" @onclick="() => SelectUser(user)">
                        <div class="user-avatar">
                            @GetInitials(user.Name)
                        </div>
                        <div class="user-info">
                            <div class="user-name">@user.Name</div>
                            <div class="user-email">@user.Email</div>
                        </div>
                    </button>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<UserDto>? users;

    protected override async Task OnInitializedAsync()
    {
        // If already logged in, redirect to home
        if (UserState.IsLoggedIn)
        {
            Navigation.NavigateTo("", replace: true);
            return;
        }

        try
        {
            users = await Http.GetFromJsonAsync<List<UserDto>>("api/users");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
            users = new List<UserDto>();
        }
    }

    private async Task SelectUser(UserDto user)
    {
        await UserState.LoginAsync(user);
        Navigation.NavigateTo("", replace: true);
    }

    private string GetInitials(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return "?";

        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();

        return name[0].ToString().ToUpper();
    }
}
